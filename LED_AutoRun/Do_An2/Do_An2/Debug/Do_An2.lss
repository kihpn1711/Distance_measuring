
Do_An2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d9  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b5  00000000  00000000  00000a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000390  00000000  00000000  00001132  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000014c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037c  00000000  00000000  0000153c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000143  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000019fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	55 00       	.word	0x0055	; ????
  56:	57 00       	.word	0x0057	; ????
  58:	59 00       	.word	0x0059	; ????
  5a:	5b 00       	.word	0x005b	; ????
  5c:	5d 00       	.word	0x005d	; ????
  5e:	5f 00       	.word	0x005f	; ????
  60:	61 00       	.word	0x0061	; ????
  62:	63 00       	.word	0x0063	; ????
  64:	66 00       	.word	0x0066	; ????
  66:	65 00       	.word	0x0065	; ????

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 90 00 	call	0x120	; 0x120 <main>
  78:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <INIT>:
#include "DHT11.h"

void INIT()
{
	//Khoi tao trang thai output cho cac chan noi toi cac LED don
	DDRD |= 0xFF;
  80:	81 b3       	in	r24, 0x11	; 17
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	81 bb       	out	0x11, r24	; 17
	//Khoi tao trang thai logic 1 cho cac chan noi toi cac LED don
	PORTD |= 0xFF;
  86:	92 b3       	in	r25, 0x12	; 18
  88:	82 bb       	out	0x12, r24	; 18
	//Khoi tao trang thai output cho cac chan noi toi cac LED 7 thanh
	DDRC |= 0xFF;
  8a:	94 b3       	in	r25, 0x14	; 20
  8c:	84 bb       	out	0x14, r24	; 20
	//Khoi tao trang thai logic 1 cho cac chan noi toi cac LED 7 thanh
	PORTC |= 0xFF;
  8e:	95 b3       	in	r25, 0x15	; 21
  90:	85 bb       	out	0x15, r24	; 21
  92:	08 95       	ret

00000094 <LED7_OUT>:
}

void LED7_OUT(unsigned char num)
{
	//Khai bao bien temp luu trang thai cua PORTC
	unsigned char temp = PORTC;
  94:	25 b3       	in	r18, 0x15	; 21
	// e – PC0
	// f – PC6
	// g – PC7
	//dot - PC3
	//Tat cac doan LED hien dang sang truoc khi sang cac doan LED moi
	temp &= 0B00001000;
  96:	28 70       	andi	r18, 0x08	; 8
	//Gan muc logic cho 8 bit cua bien temp ung voi gia tri cua bien num
	switch(num)
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	8a 30       	cpi	r24, 0x0A	; 10
  9c:	91 05       	cpc	r25, r1
  9e:	b0 f4       	brcc	.+44     	; 0xcc <LED7_OUT+0x38>
  a0:	fc 01       	movw	r30, r24
  a2:	e6 5d       	subi	r30, 0xD6	; 214
  a4:	ff 4f       	sbci	r31, 0xFF	; 255
  a6:	0c 94 a9 00 	jmp	0x152	; 0x152 <__tablejump2__>
	{
		case 0: temp |= 0B10000000; break;
  aa:	20 68       	ori	r18, 0x80	; 128
  ac:	0f c0       	rjmp	.+30     	; 0xcc <LED7_OUT+0x38>
		case 1: temp |= 0B11100011; break;
  ae:	23 6e       	ori	r18, 0xE3	; 227
  b0:	0d c0       	rjmp	.+26     	; 0xcc <LED7_OUT+0x38>
		case 2: temp |= 0B01000100; break;
  b2:	24 64       	ori	r18, 0x44	; 68
  b4:	0b c0       	rjmp	.+22     	; 0xcc <LED7_OUT+0x38>
		case 3: temp |= 0B01000001; break;
  b6:	21 64       	ori	r18, 0x41	; 65
  b8:	09 c0       	rjmp	.+18     	; 0xcc <LED7_OUT+0x38>
		case 4: temp |= 0B00100011; break;
  ba:	23 62       	ori	r18, 0x23	; 35
  bc:	07 c0       	rjmp	.+14     	; 0xcc <LED7_OUT+0x38>
		case 5: temp |= 0B00010001; break;
  be:	21 61       	ori	r18, 0x11	; 17
  c0:	05 c0       	rjmp	.+10     	; 0xcc <LED7_OUT+0x38>
		case 6: temp |= 0B00010000; break;
  c2:	20 61       	ori	r18, 0x10	; 16
  c4:	03 c0       	rjmp	.+6      	; 0xcc <LED7_OUT+0x38>
		case 7: temp |= 0B11000011; break;
  c6:	23 6c       	ori	r18, 0xC3	; 195
  c8:	01 c0       	rjmp	.+2      	; 0xcc <LED7_OUT+0x38>
		case 8: temp |= 0B00000000; break;
		case 9: temp |= 0B00000001; break;
  ca:	21 60       	ori	r18, 0x01	; 1
	}
	//Xuat gia tri logic moi ra PORTC de lam sang LED 7 thanh
	PORTC = temp;
  cc:	25 bb       	out	0x15, r18	; 21
  ce:	08 95       	ret

000000d0 <PORT>:
}

void PORT()
{
	unsigned char led_shift = 255; // Kh?i t?o giá tr? ban ??u cho LED ??n (t?t t?t c? LED)
	unsigned char led_7_count = 0; // Kh?i t?o giá tr? ban ??u cho LED 7 thanh (s? 0)
  d0:	c0 e0       	ldi	r28, 0x00	; 0
	PORTC |= 0xFF;
}

void PORT()
{
	unsigned char led_shift = 255; // Kh?i t?o giá tr? ban ??u cho LED ??n (t?t t?t c? LED)
  d2:	df ef       	ldi	r29, 0xFF	; 255
	unsigned char led_7_count = 0; // Kh?i t?o giá tr? ban ??u cho LED 7 thanh (s? 0)

	for (;;)
	{
		// LED ??n
		PORTD = led_shift; // B?t LED t?i v? trí hi?n t?i
  d4:	d2 bb       	out	0x12, r29	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	2f e9       	ldi	r18, 0x9F	; 159
  d8:	86 e8       	ldi	r24, 0x86	; 134
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <PORT+0xc>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <PORT+0x16>
  e6:	00 00       	nop
		_delay_ms(500);    // Ch? 0.5 giây
		led_shift >>= 1;   // Di chuy?n LED sang ph?i
  e8:	d6 95       	lsr	r29
		if (led_shift == 0)
  ea:	09 f4       	brne	.+2      	; 0xee <PORT+0x1e>
		led_shift = 255; // Reset giá tr? LED ??n khi ?ã sang h?t
  ec:	df ef       	ldi	r29, 0xFF	; 255

		// LED 7 thanh
		LED7_OUT(led_7_count);     // Hi?n th? s? ??m trên LED 7 thanh
  ee:	8c 2f       	mov	r24, r28
  f0:	0e 94 4a 00 	call	0x94	; 0x94 <LED7_OUT>
		PORTC ^= (1 << PC3);       // ??o tr?ng thái d?u ch?m
  f4:	95 b3       	in	r25, 0x15	; 21
  f6:	88 e0       	ldi	r24, 0x08	; 8
  f8:	89 27       	eor	r24, r25
  fa:	85 bb       	out	0x15, r24	; 21
  fc:	2f e9       	ldi	r18, 0x9F	; 159
  fe:	86 e8       	ldi	r24, 0x86	; 134
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <PORT+0x32>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <PORT+0x3c>
 10c:	00 00       	nop
		_delay_ms(500);            // Ch? 0.5 giây
		led_7_count = (led_7_count + 1) % 10; // T?ng giá tr? ??m (0-9)
 10e:	8c 2f       	mov	r24, r28
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	6a e0       	ldi	r22, 0x0A	; 10
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	0e 94 95 00 	call	0x12a	; 0x12a <__divmodhi4>
 11c:	c8 2f       	mov	r28, r24
	}
 11e:	da cf       	rjmp	.-76     	; 0xd4 <PORT+0x4>

00000120 <main>:
#include <util/delay.h>
#include "DHT11.h" // 

int main(void)
{
	INIT(); // Kh?i t?o các c?ng và tr?ng thái ban ??u cho LED
 120:	0e 94 40 00 	call	0x80	; 0x80 <INIT>

	while (1)
	{
		PORT();
 124:	0e 94 68 00 	call	0xd0	; 0xd0 <PORT>
 128:	fd cf       	rjmp	.-6      	; 0x124 <main+0x4>

0000012a <__divmodhi4>:
 12a:	97 fb       	bst	r25, 7
 12c:	07 2e       	mov	r0, r23
 12e:	16 f4       	brtc	.+4      	; 0x134 <__divmodhi4+0xa>
 130:	00 94       	com	r0
 132:	07 d0       	rcall	.+14     	; 0x142 <__divmodhi4_neg1>
 134:	77 fd       	sbrc	r23, 7
 136:	09 d0       	rcall	.+18     	; 0x14a <__divmodhi4_neg2>
 138:	0e 94 af 00 	call	0x15e	; 0x15e <__udivmodhi4>
 13c:	07 fc       	sbrc	r0, 7
 13e:	05 d0       	rcall	.+10     	; 0x14a <__divmodhi4_neg2>
 140:	3e f4       	brtc	.+14     	; 0x150 <__divmodhi4_exit>

00000142 <__divmodhi4_neg1>:
 142:	90 95       	com	r25
 144:	81 95       	neg	r24
 146:	9f 4f       	sbci	r25, 0xFF	; 255
 148:	08 95       	ret

0000014a <__divmodhi4_neg2>:
 14a:	70 95       	com	r23
 14c:	61 95       	neg	r22
 14e:	7f 4f       	sbci	r23, 0xFF	; 255

00000150 <__divmodhi4_exit>:
 150:	08 95       	ret

00000152 <__tablejump2__>:
 152:	ee 0f       	add	r30, r30
 154:	ff 1f       	adc	r31, r31
 156:	05 90       	lpm	r0, Z+
 158:	f4 91       	lpm	r31, Z
 15a:	e0 2d       	mov	r30, r0
 15c:	09 94       	ijmp

0000015e <__udivmodhi4>:
 15e:	aa 1b       	sub	r26, r26
 160:	bb 1b       	sub	r27, r27
 162:	51 e1       	ldi	r21, 0x11	; 17
 164:	07 c0       	rjmp	.+14     	; 0x174 <__udivmodhi4_ep>

00000166 <__udivmodhi4_loop>:
 166:	aa 1f       	adc	r26, r26
 168:	bb 1f       	adc	r27, r27
 16a:	a6 17       	cp	r26, r22
 16c:	b7 07       	cpc	r27, r23
 16e:	10 f0       	brcs	.+4      	; 0x174 <__udivmodhi4_ep>
 170:	a6 1b       	sub	r26, r22
 172:	b7 0b       	sbc	r27, r23

00000174 <__udivmodhi4_ep>:
 174:	88 1f       	adc	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	5a 95       	dec	r21
 17a:	a9 f7       	brne	.-22     	; 0x166 <__udivmodhi4_loop>
 17c:	80 95       	com	r24
 17e:	90 95       	com	r25
 180:	bc 01       	movw	r22, r24
 182:	cd 01       	movw	r24, r26
 184:	08 95       	ret

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
